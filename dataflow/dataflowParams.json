{
	"name": "dataflowParams",
	"properties": {
		"folder": {
			"name": "Parametrizacion"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "carpetaCSV",
						"type": "DatasetReference"
					},
					"name": "ProdDesing"
				},
				{
					"dataset": {
						"referenceName": "carpetaCSV",
						"type": "DatasetReference"
					},
					"name": "Ordenes"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Parquet",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select2"
				},
				{
					"name": "filter1"
				},
				{
					"name": "select1"
				},
				{
					"name": "millid"
				},
				{
					"name": "select3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          RunId as string,",
				"          CreatedBy as string,",
				"          CreatedTimestamp as string,",
				"          MillId as string,",
				"          ProductCode as integer,",
				"          {product-type} as string,",
				"          TypeCode as short,",
				"          Status as string,",
				"          SteelChemCode as double,",
				"          SteelGradeCode as short,",
				"          OdExtMm as double,",
				"          WtMm as double,",
				"          HtCode as short,",
				"          MinLength as double,",
				"          MaxLength as double,",
				"          MultAlt2 as short,",
				"          OdExtIn as double,",
				"          PPF as double,",
				"          StartDate as string,",
				"          LastModifDate as string,",
				"          CoupCode as integer,",
				"          MultAlt1 as short,",
				"          HolCoupCode as short,",
				"          LastModifUser as string,",
				"          StartUser as string,",
				"          WtIn as double,",
				"          EndDesc as string,",
				"          Type as string,",
				"          NormDesc as integer,",
				"          SubNormDesc as string,",
				"          SteelGradeDesc as string,",
				"          EndLongDesc as string,",
				"          EndCodeOdMin as short,",
				"          EndCode as short,",
				"          EndCodeLocal as string,",
				"          EndCodeDescLoc as string,",
				"          NormCode as integer,",
				"          SubNormCode as integer,",
				"          {Type-prco} as string,",
				"          {OdExtMm-prco} as double,",
				"          {WtMm-prco} as double,",
				"          {WtIn-prco} as double,",
				"          {EndLongDesc-prco} as string,",
				"          {SteelGradeDesc-prco} as string,",
				"          {MinLength-prco} as double,",
				"          {MaxLength-prco} as double,",
				"          {NormDesc-prco} as string,",
				"          {HtCode-prco} as short,",
				"          {PPF-prco} as double,",
				"          {ENP-PRCO} as short,",
				"          {PCK-PRCO} as short,",
				"          {FIN-PRCO} as string,",
				"          {FTC-PRCO} as short,",
				"          {ETC-PRCO} as short,",
				"          TS_END_COUPLING_FLAG as string,",
				"          {conforming-route} as string,",
				"          HolTubeCode as integer,",
				"          coupling_weight as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ProdDesing",
				"source(output(",
				"          Mill_Id as string,",
				"          Order_Number as integer,",
				"          Order_Item as string,",
				"          Order_Item_Creation_Date as string,",
				"          Product_Code as string,",
				"          Requested_Tn_Qty as double,",
				"          Segment_Id as short,",
				"          Invoicing_Customer_Id as integer,",
				"          Production_Order_Key as string,",
				"          COMM_ORDER_ITM_ID as string,",
				"          COMM_DOC_LOCATION_CODE as string,",
				"          COMM_DOC_YEAR as string,",
				"          COMM_DOC_MONTH as string,",
				"          COMM_DOC_TYPE as string,",
				"          COMM_DOC_NUMBER as string,",
				"          COMM_DOC_ITEM_NUM as string,",
				"          RFD_Type as string,",
				"          Order_Rolling_Date as string,",
				"          Order_Aging_Rolling_Date as string,",
				"          Order_RFD_Date as string,",
				"          Order_Aging_RFD_Date as string,",
				"          Order_Reception_Date as string,",
				"          Order_Reception_Aging_Date as string,",
				"          Order_First_Process_Date as string,",
				"          Order_First_Process_Aging_Date as string,",
				"          rnd_flag as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Ordenes",
				"Ordenes select(mapColumn(",
				"          Mill_Id,",
				"          Order_Number,",
				"          Order_Item,",
				"          Order_Item_Creation_Date,",
				"          Product_Code,",
				"          Requested_Tn_Qty,",
				"          Segment_Id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"ProdDesing filter(MillId=='1') ~> filter1",
				"filter1 select(mapColumn(",
				"          MillId,",
				"          ProductCode,",
				"          {product-type},",
				"          TypeCode,",
				"          Status,",
				"          SteelChemCode,",
				"          SteelGradeCode,",
				"          OdExtMm,",
				"          WtMm,",
				"          HtCode,",
				"          MinLength",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, select2 join(MillId == Mill_Id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> millid",
				"millid select(mapColumn(",
				"          MillId,",
				"          ProductCode,",
				"          {product-type},",
				"          TypeCode,",
				"          Status,",
				"          Order_Number,",
				"          Order_Item,",
				"          Order_Item_Creation_Date,",
				"          Product_Code,",
				"          Requested_Tn_Qty,",
				"          Segment_Id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Mill_Id as string,",
				"          Order_Number as string,",
				"          Order_Item as string,",
				"          Order_Item_Creation_Date as string,",
				"          Product_Code as string,",
				"          Requested_Tn_Qty as string,",
				"          Segment_Id as string,",
				"          Invoicing_Customer_Id as string,",
				"          Production_Order_Key as string,",
				"          COMM_ORDER_ITM_ID as string,",
				"          COMM_DOC_LOCATION_CODE as string,",
				"          COMM_DOC_YEAR as string,",
				"          COMM_DOC_MONTH as string,",
				"          COMM_DOC_TYPE as string,",
				"          COMM_DOC_NUMBER as string,",
				"          COMM_DOC_ITEM_NUM as string,",
				"          RFD_Type as string,",
				"          Order_Rolling_Date as string,",
				"          Order_Aging_Rolling_Date as string,",
				"          Order_RFD_Date as string,",
				"          Order_Aging_RFD_Date as string,",
				"          Order_Reception_Date as string,",
				"          Order_Reception_Aging_Date as string,",
				"          Order_First_Process_Date as string,",
				"          Order_First_Process_Aging_Date as string,",
				"          rnd_flag as string",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}