{
	"name": "dataflowParams",
	"properties": {
		"folder": {
			"name": "Parametrizacion"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "carpetaXLSX",
						"type": "DatasetReference"
					},
					"name": "XLSXparams"
				},
				{
					"dataset": {
						"referenceName": "carpetaCSV",
						"type": "DatasetReference"
					},
					"name": "CSVSparams"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Parquet",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "Storage",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "millid1"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "join1"
				},
				{
					"name": "select3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          stock_record_key as string,",
				"          mill_id as string,",
				"          data_source_origin as string,",
				"          stock_date as date,",
				"          process_date as double,",
				"          shift_number as short,",
				"          storage_type as string,",
				"          storage_unit_code as string,",
				"          heat_key as string,",
				"          mill_production_order_item_key as string,",
				"          work_order_key as integer,",
				"          local_product_code as integer,",
				"          local_product_type as string,",
				"          stock_type as string,",
				"          local_material_status as short,",
				"          stock_classification as string,",
				"          location_type as string,",
				"          location_code as string,",
				"          production_line_id as string,",
				"          warehouse_key as short,",
				"          machine_id as string,",
				"          rfd_flag as string,",
				"          stock_in_process_flag as string,",
				"          origin_rolling_mill as string,",
				"          aging_date as integer,",
				"          aging_date_name as string,",
				"          aging_flag as string,",
				"          stock_mt_qty as double,",
				"          stock_pc_qty as short,",
				"          stock_tn_qty as double,",
				"          stock_kg_qty as double,",
				"          stock_nominal_tn_qty as string,",
				"          stock_ft_qty as double,",
				"          caliber_steel as string,",
				"          steel_code as string,",
				"          length_steel as string,",
				"          tenaris_property_flag as string,",
				"          origin_mill as string,",
				"          Heat_Date as string,",
				"          Order_Heat_Rolling_Date as string,",
				"          Order_Rolling_Date as string,",
				"          Order_Aging_Rolling_Date as string,",
				"          Order_RFD_Date as string,",
				"          Order_Aging_RFD_Date as string,",
				"          Order_Reception_Date as string,",
				"          Order_Reception_Aging_Date as string,",
				"          Order_First_Process_Date as string,",
				"          Order_First_Process_Aging_Date as string,",
				"          RFD_Type as string,",
				"          Local_material_status_sub_type as string,",
				"          SurrogateKey as integer,",
				"          local_material_status_cost as short,",
				"          Imported_material_flag as string,",
				"          bill_and_hold_flag as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> XLSXparams",
				"source(output(",
				"          Mill_Id as string,",
				"          Order_Number as integer,",
				"          Order_Item as string,",
				"          Order_Item_Creation_Date as string,",
				"          Product_Code as string,",
				"          Requested_Tn_Qty as double,",
				"          Segment_Id as short,",
				"          Invoicing_Customer_Id as integer,",
				"          Production_Order_Key as string,",
				"          COMM_ORDER_ITM_ID as string,",
				"          COMM_DOC_LOCATION_CODE as string,",
				"          COMM_DOC_YEAR as string,",
				"          COMM_DOC_MONTH as string,",
				"          COMM_DOC_TYPE as string,",
				"          COMM_DOC_NUMBER as string,",
				"          COMM_DOC_ITEM_NUM as string,",
				"          RFD_Type as string,",
				"          Order_Rolling_Date as string,",
				"          Order_Aging_Rolling_Date as string,",
				"          Order_RFD_Date as string,",
				"          Order_Aging_RFD_Date as string,",
				"          Order_Reception_Date as string,",
				"          Order_Reception_Aging_Date as string,",
				"          Order_First_Process_Date as string,",
				"          Order_First_Process_Aging_Date as string,",
				"          rnd_flag as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CSVSparams",
				"XLSXparams filter(mill_id=='1') ~> millid1",
				"millid1 select(mapColumn(",
				"          stock_record_key,",
				"          mill_id,",
				"          data_source_origin,",
				"          stock_date,",
				"          process_date,",
				"          shift_number,",
				"          storage_type,",
				"          storage_unit_code,",
				"          heat_key,",
				"          mill_production_order_item_key,",
				"          work_order_key,",
				"          local_product_code,",
				"          local_product_type,",
				"          stock_type,",
				"          local_material_status,",
				"          stock_nominal_tn_qty,",
				"          stock_ft_qty,",
				"          caliber_steel,",
				"          steel_code",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"CSVSparams select(mapColumn(",
				"          Mill_Id,",
				"          Order_Number,",
				"          Order_Item,",
				"          Order_Item_Creation_Date,",
				"          Product_Code,",
				"          Requested_Tn_Qty,",
				"          Segment_Id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select1, select2 join(select1@mill_id == select2@Mill_Id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          stock_record_key,",
				"          mill_id = select1@mill_id,",
				"          data_source_origin,",
				"          stock_date,",
				"          process_date,",
				"          work_order_key,",
				"          local_product_type,",
				"          stock_type,",
				"          local_material_status",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Mill_Id as string,",
				"          Order_Number as string,",
				"          Order_Item as string,",
				"          Order_Item_Creation_Date as string,",
				"          Product_Code as string,",
				"          Requested_Tn_Qty as string,",
				"          Segment_Id as string,",
				"          Invoicing_Customer_Id as string,",
				"          Production_Order_Key as string,",
				"          COMM_ORDER_ITM_ID as string,",
				"          COMM_DOC_LOCATION_CODE as string,",
				"          COMM_DOC_YEAR as string,",
				"          COMM_DOC_MONTH as string,",
				"          COMM_DOC_TYPE as string,",
				"          COMM_DOC_NUMBER as string,",
				"          COMM_DOC_ITEM_NUM as string,",
				"          RFD_Type as string,",
				"          Order_Rolling_Date as string,",
				"          Order_Aging_Rolling_Date as string,",
				"          Order_RFD_Date as string,",
				"          Order_Aging_RFD_Date as string,",
				"          Order_Reception_Date as string,",
				"          Order_Reception_Aging_Date as string,",
				"          Order_First_Process_Date as string,",
				"          Order_First_Process_Aging_Date as string,",
				"          rnd_flag as string",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}