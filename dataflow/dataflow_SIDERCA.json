{
	"name": "dataflow_SIDERCA",
	"properties": {
		"folder": {
			"name": "Siderca"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Stock_20220131",
						"type": "DatasetReference"
					},
					"name": "STOCK"
				},
				{
					"dataset": {
						"referenceName": "ProdDesignBajadaSiderca14Feb",
						"type": "DatasetReference"
					},
					"name": "PRODDESIGN"
				},
				{
					"dataset": {
						"referenceName": "OrdenesSidercaBajadaSiderca",
						"type": "DatasetReference"
					},
					"name": "ORDENES"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Parquet1",
						"type": "DatasetReference"
					},
					"name": "DatalakeParquet"
				}
			],
			"transformations": [
				{
					"name": "ID1"
				},
				{
					"name": "ID2"
				},
				{
					"name": "ID3"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          stock_record_key as string,",
				"          mill_id as string,",
				"          data_source_origin as string,",
				"          stock_date as date,",
				"          process_date as double,",
				"          shift_number as short,",
				"          storage_type as string,",
				"          storage_unit_code as string,",
				"          heat_key as string,",
				"          mill_production_order_item_key as string,",
				"          work_order_key as integer,",
				"          local_product_code as integer,",
				"          local_product_type as string,",
				"          stock_type as string,",
				"          local_material_status as short,",
				"          stock_classification as string,",
				"          location_type as string,",
				"          location_code as string,",
				"          production_line_id as string,",
				"          warehouse_key as short,",
				"          machine_id as string,",
				"          rfd_flag as string,",
				"          stock_in_process_flag as string,",
				"          origin_rolling_mill as string,",
				"          aging_date as integer,",
				"          aging_date_name as string,",
				"          aging_flag as string,",
				"          stock_mt_qty as double,",
				"          stock_pc_qty as short,",
				"          stock_tn_qty as double,",
				"          stock_kg_qty as double,",
				"          stock_nominal_tn_qty as string,",
				"          stock_ft_qty as double,",
				"          caliber_steel as string,",
				"          steel_code as string,",
				"          length_steel as string,",
				"          tenaris_property_flag as string,",
				"          origin_mill as string,",
				"          Heat_Date as string,",
				"          Order_Heat_Rolling_Date as string,",
				"          Order_Rolling_Date as string,",
				"          Order_Aging_Rolling_Date as string,",
				"          Order_RFD_Date as string,",
				"          Order_Aging_RFD_Date as string,",
				"          Order_Reception_Date as string,",
				"          Order_Reception_Aging_Date as string,",
				"          Order_First_Process_Date as string,",
				"          Order_First_Process_Aging_Date as string,",
				"          RFD_Type as string,",
				"          Local_material_status_sub_type as string,",
				"          SurrogateKey as integer,",
				"          local_material_status_cost as short,",
				"          Imported_material_flag as string,",
				"          bill_and_hold_flag as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> STOCK",
				"source(output(",
				"          RunId as string,",
				"          CreatedBy as string,",
				"          CreatedTimestamp as string,",
				"          MillId as string,",
				"          ProductCode as integer,",
				"          {product-type} as string,",
				"          TypeCode as short,",
				"          Status as string,",
				"          SteelChemCode as double,",
				"          SteelGradeCode as short,",
				"          OdExtMm as double,",
				"          WtMm as double,",
				"          HtCode as short,",
				"          MinLength as double,",
				"          MaxLength as double,",
				"          MultAlt2 as short,",
				"          OdExtIn as double,",
				"          PPF as double,",
				"          StartDate as string,",
				"          LastModifDate as string,",
				"          CoupCode as integer,",
				"          MultAlt1 as short,",
				"          HolCoupCode as short,",
				"          LastModifUser as string,",
				"          StartUser as string,",
				"          WtIn as double,",
				"          EndDesc as string,",
				"          Type as string,",
				"          NormDesc as integer,",
				"          SubNormDesc as string,",
				"          SteelGradeDesc as string,",
				"          EndLongDesc as string,",
				"          EndCodeOdMin as short,",
				"          EndCode as short,",
				"          EndCodeLocal as string,",
				"          EndCodeDescLoc as string,",
				"          NormCode as integer,",
				"          SubNormCode as integer,",
				"          {Type-prco} as string,",
				"          {OdExtMm-prco} as double,",
				"          {WtMm-prco} as double,",
				"          {WtIn-prco} as double,",
				"          {EndLongDesc-prco} as string,",
				"          {SteelGradeDesc-prco} as string,",
				"          {MinLength-prco} as double,",
				"          {MaxLength-prco} as double,",
				"          {NormDesc-prco} as string,",
				"          {HtCode-prco} as short,",
				"          {PPF-prco} as double,",
				"          {ENP-PRCO} as short,",
				"          {PCK-PRCO} as short,",
				"          {FIN-PRCO} as string,",
				"          {FTC-PRCO} as short,",
				"          {ETC-PRCO} as short,",
				"          TS_END_COUPLING_FLAG as string,",
				"          {conforming-route} as string,",
				"          HolTubeCode as integer,",
				"          coupling_weight as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> PRODDESIGN",
				"source(output(",
				"          Mill_Id as string,",
				"          Order_Number as integer,",
				"          Order_Item as string,",
				"          Order_Item_Creation_Date as string,",
				"          Product_Code as string,",
				"          Requested_Tn_Qty as double,",
				"          Segment_Id as short,",
				"          Invoicing_Customer_Id as integer,",
				"          Production_Order_Key as string,",
				"          COMM_ORDER_ITM_ID as string,",
				"          COMM_DOC_LOCATION_CODE as string,",
				"          COMM_DOC_YEAR as string,",
				"          COMM_DOC_MONTH as string,",
				"          COMM_DOC_TYPE as string,",
				"          COMM_DOC_NUMBER as string,",
				"          COMM_DOC_ITEM_NUM as string,",
				"          RFD_Type as string,",
				"          Order_Rolling_Date as string,",
				"          Order_Aging_Rolling_Date as string,",
				"          Order_RFD_Date as string,",
				"          Order_Aging_RFD_Date as string,",
				"          Order_Reception_Date as string,",
				"          Order_Reception_Aging_Date as string,",
				"          Order_First_Process_Date as string,",
				"          Order_First_Process_Aging_Date as string,",
				"          rnd_flag as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ORDENES",
				"STOCK filter(mill_id == \"1\") ~> ID1",
				"PRODDESIGN filter(MillId == '1') ~> ID2",
				"ORDENES filter(Mill_Id == '1') ~> ID3",
				"ID1, ID2 join(mill_id == MillId",
				"     && local_product_code == ProductCode,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, ID3 join(mill_production_order_item_key == Production_Order_Key,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DatalakeParquet"
			]
		}
	}
}